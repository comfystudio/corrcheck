<?php	/* ==================== START CONNECTION CODE ==================== */  	// Get the db connection details	require_once($_SERVER["DOCUMENT_ROOT"] . "/inc/config.php");	// Get the Try/Catch block to create the db object	require_once(ROOT_PATH . "inc/setup_page_session.php");	/* ==================== END CONNECTION CODE ==================== */	// This variable will be used to re-display the user's username to them in the     // login form if they fail to enter the correct password.  It is initialized here     // to an empty value, which will be shown if the user has not submitted the form.     $submitted_username = '';     // This if statement checks to determine whether the login form has been submitted     // If it has, then the login code is run, otherwise the form is displayed     if(!empty($_POST))     {         // This query retreives the user's information from the database using         // their username.         $query = "             SELECT                 *            FROM tbl_users             WHERE                 username = :username         ";                  // The parameter values         $query_params = array(             ':username' => $_POST['username']         );                  try         {             // Execute the query against the database             $stmt = $db->prepare($query);             $result = $stmt->execute($query_params);         }         catch(PDOException $ex)         {             // Note: On a production website, you should not output $ex->getMessage().             // It may provide an attacker with helpful information about your code.              die("Failed to run query: " . $ex->getMessage());         }         // This variable tells us whether the user has successfully logged in or not.         // We initialize it to false, assuming they have not.         // If we determine that they have entered the right details, then we switch it to true.         $login_ok = false;          // Retrieve the user data from the database.  If $row is false, then the username         // they entered is not registered.         $row = $stmt->fetch();         if($row)         {             // Using the password submitted by the user and the salt stored in the database,             // we now check to see whether the passwords match by hashing the submitted password             // and comparing it to the hashed version already stored in the database.             $check_password = hash('sha256', $_POST['password'] . $row['salt']);             for($round = 0; $round < 65536; $round++)             {                 $check_password = hash('sha256', $check_password . $row['salt']);             }                          if($check_password === $row['password'])            {                 // If they do, then we flip this to true                 $login_ok = true;             }         }         // If the user logged in successfully, then we send them to the private members-only page         // Otherwise, we display a login failed message and show the login form again         if($login_ok)         {             // Here I am preparing to store the $row array into the $_SESSION by             // removing the salt and password values from it.  Although $_SESSION is             // stored on the server-side, there is no reason to store sensitive values             // in it unless you have to.  Thus, it is best practice to remove these             // sensitive values first.             unset($row['salt']);             unset($row['password']);                          // This stores the user's data into the session at the index 'user'.             // We will check this index on the private members-only page to determine whether             // or not the user is logged in.  We can also use it to retrieve             // the user's details.             $_SESSION['user'] = $row;                          // Redirect the user to the private members-only page.             header("Location: report-management.php");             error_log("Error message\n", 3, "error_log.log");            die("Redirecting to: report-management.php");         }         else         {             // Tell the user they failed             print("Login Failed.");                          // Show them their username again so all they have to do is enter a new             // password.  The use of htmlentities prevents XSS attacks.  You should             // always use htmlentities on user submitted values before displaying them             // to any users (including the user that submitted them).  For more information:             // http://en.wikipedia.org/wiki/XSS_attack             $submitted_username = htmlentities($_POST['username'], ENT_QUOTES, 'UTF-8');         }     }     /* ==================== DO FORM ==================== */?><!DOCTYPE html><html>  <head>    <title>Corr Check Vehicle Survey</title>    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <!-- Bootstrap -->    <link href="css/styles.css" rel="stylesheet" media="screen">        <link href="css/datepicker.css" rel="stylesheet" media="screen">     </head>  <body class="master-login">         <!-- Top Bar -->      <div class="topbar">        <div class="topbar-content container_12">                                <div class="app-acc-dets">                          </div>        </div><!-- Topbar-content -->      </div><!-- Topbar -->          <!-- header -->    <header class="app-header">      <div class="app-header-content container_12">        <div class="toplogo">          <img src="http://www.corrbrothers.co.uk/wp-content/themes/corrbrothers/images/corr-brothers-logo.png" title="Tachographs &amp; Commercial Vehicle Services Northern Ireland">                  </div>              </div>    </header>        <h1>Corr Check Vehicle Survey</h1>        <!-- login panel -->        <div class="panel panel-default master-login-panel">          <div class="panel-heading">            <h3 class="panel-title"> Login</h3>          </div>          <div class="panel-body">                <form action="login.php" method="post">                    <div class="question_row clearfix form-group">                        <label class="col-sm-3 control-label">Username:</label>                        <div class="col-sm-9">                            <input type="text" class="form-control number-input form-control"  name="username" value="<?php echo $submitted_username; ?>" />                         </div>                    </div>                    <div class="question_row clearfix form-group">                                        <label class="col-sm-3 control-label">Password:</label>                        <div class="col-sm-9">                            <input type="password" class="form-control number-input form-control"  name="password" value="" />                         </div>                    </div>                    <input type="submit" value="Login" class="btn btn-success" />                 </form>           </div>        </div>    <!-- <a href="register.php">Register</a> -->        <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->    <script src="https://code.jquery.com/jquery.js"></script>    <!-- Include all compiled plugins (below), or include individual files as needed -->    <script src="//netdna.bootstrapcdn.com/bootstrap/3.0.2/js/bootstrap.min.js"></script>    <script src="js/bootstrap.min.js"></script>        <script src="dist/jquery.validate.js"></script>    <script src="js/bootstrap-datepicker.js"></script>        <script src="js/corrcheck.js"></script>        <script type="text/javascript">    $(document).ready(function() {            });    </script>  </body></html>